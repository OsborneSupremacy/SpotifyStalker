@page "/stalk"
@page "/stalk/{username}"

@using SpotifyStalker.Interface
@using Spotify.Model
@using Spotify.Object;
@using Spotify.Interface
@using SpotifyStalker.Model;
@using Microsoft.Extensions.Options;
@inject IApiQueryService ApiQueryService
@inject IStalkModelTransformer StalkModelTransformer;
@inject IOptions<SpotifyApiSettings> Options;
@inject IApiBatchQueryService<ArtistModelCollection> ArtistBatchQueryService;
@inject IApiBatchQueryService<AudioFeaturesModelCollection> AudioFeaturesQueryService;

<div class="container">

    <div class="jumbotron">
        <h1>Stalk</h1>

        <p class="lead text-muted">Need some text here.</p>

        <div class="input-group mb-3" style="width: 500px;">
            <input type="text" placeholder="Spotify Username" class="form-control" @bind-value="ViewModel.UserName" />
            <div class="input-group-append">
                <button @onclick="QueryUserAsync" class="btn spotify-background-primary">
                    Stalk
                </button>
            </div>
        </div>

        @if (ViewModel.UserPlaylistResult == RequestStatus.NotFound)
        {
            <h5 class="alert alert-danger" role="alert">
                User <span class="badge badge-danger">@ViewModel.UserName</span> not found! I thought you said you knew the username?
            </h5>
        }

        @if (ViewModel.UserPlaylistResult == RequestStatus.Success && !ViewModel.Playlists.Display)
        {
            <h5 class="alert alert-warning" role="alert">
                User <span class="badge badge-warning"><SpotifyLink Name="@ViewModel.UserName" Id="@ViewModel.UserName" Type="user" /></span> exists, but has no public playlists. They must think they're too precious to be stalked by random Internet strangers.
            </h5>
        }

        @if (ViewModel.Playlists.Display)
        {
            <StalkTarget OwnerId="@ViewModel.Playlists.Items.FirstOrDefault().Value.Owner.Id" 
                         DisplayName="@ViewModel.Playlists.Items.FirstOrDefault().Value.Owner.DisplayName"
                         Processing="@ViewModel.Processing" />
        }

    </div>

</div>

@if (ViewModel.Playlists.Display)
{
    <!--begin - row 1 -->
    <div class="row">

        <!--begin - playlists-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Playlists&nbsp;
                    <CategoryProgress Processed="@ViewModel.Playlists.Processed" ProgressBarStyle="bg-success" Total="@ViewModel.Playlists.Total" ProgressDisplay="@ViewModel.Playlists.ProgressDisplay" />
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var playlist in StalkModelTransformer
                        .GetItems<PlaylistModel>(ViewModel)
                        .OrderByDescending(x => x.TrackInfo.Total)
                        .ToList())
                                {
                                    <tr>
                                        <td>
                                            <SpotifyLink Name="@playlist.Name" Type="playlist" Id="@playlist.Id" />
                                        </td>
                                        <td>@(playlist.Tracks.Count()) / @(playlist.TrackInfo?.Total ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - playlists-->
        <!--begin - artists-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Artists&nbsp;
                    <CategoryProgress Processed="@ViewModel.Artists.Processed" ProgressBarStyle="bg-info" Total="@ViewModel.Artists.Total" ProgressDisplay="@ViewModel.Artists.ProgressDisplay" />
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var artist in StalkModelTransformer
                        .GetItems<ArtistModel>(ViewModel)
                        .OrderByDescending(x => x.Tracks?.Count ?? 0))
                                {
                                    <tr>
                                        <td>
                                            <SpotifyLink Name="@artist.Name" Type="artist" Id="@artist.Id" />
                                        </td>
                                        <td>@(artist.Tracks?.Count() ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - artists-->
        <!--end - genres-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Genres&nbsp;
                    <CategoryProgress Processed="@ViewModel.Genres.Processed" ProgressBarStyle="bg-warning" Total="@ViewModel.Genres.Total" ProgressDisplay="@ViewModel.Genres.ProgressDisplay" />
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                    <th>Artists</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var genre in StalkModelTransformer
                        .GetItems<GenreModel>(ViewModel)
                        .OrderByDescending(x => x.Tracks.Count).ToList())
                                {
                                    <tr>
                                        <td>@genre.Name</td>
                                        <td>@(genre?.Tracks.Count ?? 0)</td>
                                        <td>@(genre?.Artists.Count ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - genres-->
    </div>
    <!--end - row 1 -->

    <p>&nbsp;</p>

    <!--begin - row 2 -->
    <div class="row">

        <!--begin - audio features-->
        <div class="col-sm-8">
            <div class="card">
                <div class="card-header">
                    Audio Features&nbsp;
                    <CategoryProgress Processed="@ViewModel.Tracks.Processed" ProgressBarStyle="bg-danger" Total="@ViewModel.Tracks.Total" ProgressDisplay="@ViewModel.Tracks.ProgressDisplay" />
                </div>
                <div class="card-body">
                    <div>
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Metric</th>
                                    <th>Avg.</th>
                                    <th>Range</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var metric in StalkModelTransformer
                      .GetItems<Metric>(ViewModel).OrderBy(x => x.Priority).ToList())
                                {
                                    <tr>
                                        <td>
                                            <span href="#" title="@metric.Content" class="badge badge-info">ℹ️</span> @metric.Name
                                        </td>
                                        <td align="right">@metric.FormattedAverage</td>
                                        <td align="right">@metric.NominalMin - @metric.NominalMax @metric.Unit</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - audio features-->
        <!--begin - section 3-->
        <div class="col-sm-4">

        </div>
        <!--end - section 3-->

    </div>
    <!--end - row 2 -->

    <p>&nbsp;</p>

    @foreach (var metric in StalkModelTransformer.GetItems<Metric>(ViewModel).OrderBy(x => x.Priority).ToList())
    {
        <MetricComponent Metric="@metric"></MetricComponent>
    }
}


@code {

    [Parameter]
    public string Username { get; set; }

    StalkModel ViewModel = new StalkModel();

    protected override Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Username))
        {
            ViewModel.UserName = Username;
            return QueryUserAsync();
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    public async Task QueryUserAsync()
    {
        ViewModel = await StalkModelTransformer.ResetAsync(ViewModel);

        setProcessingMessage("Looking up playlists");

        var userPlayListResult = await ApiQueryService.QueryAsync<UserPlaylistsModel>(ViewModel.UserName, Options.Value.Limits.UserPlaylist);

        userPlayListResult.Match
        (
            model =>
            {
                ViewModel.UserPlaylistResult = RequestStatus.Success;
                setProcessingMessage("Registering playlists");
                ViewModel = StalkModelTransformer.RegisterPlaylists(ViewModel, model.Playlists);
                StateHasChanged();
                return true;
            },
            exception =>
            {
                ViewModel.UserPlaylistResult = exception switch {
                    RequestException x => x.RequestStatus,
                    _ => RequestStatus.Failed
                };
                return false;
            }
        );

        if (!ViewModel.Playlists.Display)
        {
            clearProcessingMessage();
            return;
        }

        setProcessingMessage("Getting playlist tracks");

        // at this point we only have playlist names and IDs.
        // get the track list for each playlist
        foreach (var playlist in ViewModel.Playlists.Items)
        {
            var playlistResult = await ApiQueryService.QueryAsync<PlaylistModel>(playlist.Value.Id, Options.Value.Limits.PlaylistTrack);

            IncrementCount<PlaylistModel>();

            playlistResult.Match
            (
                model =>
                {
                    // add the tracks from the playlist api query to the list of all tracks
                    foreach (var playlistModelTrack in model.Items)
                        ViewModel = StalkModelTransformer.RegisterTrack(ViewModel, playlist.Value, playlistModelTrack.Track);
                    return true;
                },
                exception =>
                {
                    return false;
                }
            );
        }

        setProcessingMessage("Looking up artists");

        // add all artists to batch query service
        foreach (var artist in ViewModel.Artists.Items)
            ArtistBatchQueryService.AddToQueue(artist.Key);

        while (!ArtistBatchQueryService.QueueIsEmpty())
        {
            var (artistResult, artistItemsQueried) = await ArtistBatchQueryService.QueryAsync();

            artistResult.Match
            (
                model =>
                {
                    // loop through results, assigning artist genres to artists
                    foreach (var result in model.Artists)
                    {
                        IncrementCount<ArtistModel>();

                        var artist = ViewModel.Artists.Items[result.Id];

                        artist.Genres = result.Genres;
                        StalkModelTransformer.RegisterGenre(ViewModel, artist);
                    }
                    return true;
                },
                exception =>
                {
                    IncrementCount<ArtistModel>(artistItemsQueried);
                    return false;
                }
            );
        }

        setProcessingMessage("Looking up audio features");

        foreach (var track in ViewModel.Tracks.Items)
        {
            if (!string.IsNullOrEmpty(track.Value.Id))
                AudioFeaturesQueryService.AddToQueue(track.Value.Id);
        }

        while (!AudioFeaturesQueryService.QueueIsEmpty())
        {
            var (audioFeaturesResult, audioFeaturesQueriedCount) = await AudioFeaturesQueryService.QueryAsync();

            audioFeaturesResult.Match
            (
                model =>
                {
                    foreach (var result in model.AudioFeaturesList)
                    {
                        IncrementCount<Track>();
                        ViewModel = StalkModelTransformer.RegisterAudioFeature(ViewModel, result);
                    }
                    return true;
                },
                exception =>
                {
                    IncrementCount<Track>(audioFeaturesQueriedCount);
                    return false;
                }
            );
            // loop through results
        }

        clearProcessingMessage();

        void setProcessingMessage(string message) => ViewModel.Processing =new ProcessingStage(true, message);

        void clearProcessingMessage() => ViewModel.Processing = new ProcessingStage(false, default);
    }

    private void IncrementCount<T>(int incrementBy = 1) where T : ISpotifyStandardObject
    {
        for (int x = 0; x < incrementBy; x++)
            ViewModel = StalkModelTransformer.IncrementCount<T>(ViewModel);
        StateHasChanged();
    }

}
