@page "/stalk"

@using SpotifyStalker.Interface
@using Spotify.Model
@using Spotify.Object;
@using SpotifyStalker.Model;
@using Microsoft.Extensions.Options;
@inject IApiQueryService ApiQueryService
@inject IStalkModelTransformer StalkModelTransformer;
@inject IOptions<SpotifyApiSettings> Options;

<h1>Stalk</h1>

<div class="input-group mb-3" style="width: 500px;">
    <input type="text" placeholder="Spotify Username" class="form-control" @bind-value="ViewModel.UserName" />
    <div class="input-group-append">
        <button @onclick="QueryUserAsync" class="btn btn-primary">
            Search
        </button>
        <button class="btn btn-danger">
            Stop
        </button>
    </div>
</div>

@if (ViewModel.UserPlaylistResult == RequestStatus.NotFound)
{
    <h5 class="alert alert-danger" role="alert">
        User @ViewModel.UserName not found!
    </h5>
}

@if (ViewModel.UserPlaylistResult == RequestStatus.Success && !ViewModel.ShowPlayLists)
{
    <h5 class="alert alert-warning" role="alert">
        User @ViewModel.UserName exists, but has no public playlists.
    </h5>
}

@if (ViewModel.ShowPlayLists)
{
<!--begin - row 1 -->
<div class="row">

    <!--begin - playlists-->
    <div class="col-sm-4">
        <div class="card">
            <div class="card-header">
                Playlists <span>(@ViewModel.ProcessedPlaylistCount / @ViewModel.PlaylistCount)</span>&nbsp;
                @if (ViewModel.PlaylistsProcessing)
                {
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
            <div class="card-body">
                <div class="scroll">
                    <table class='table table-striped' aria-labelledby="tableLabel">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Tracks</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var playlist in ViewModel.GetOrderedPlayLists())
                            {
                                <tr>
                                    <td>@playlist.Name</td>
                                    <td>@(playlist?.FoundTracks?.Count() ?? 0) / @(playlist.Tracks?.Total ?? 0)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!--end - playlists-->
    <!--begin - artists-->
    <div class="col-sm-4">
        <div class="card">
            <div class="card-header">
                Artists <span>({{ processedArtists }} / @ViewModel.ArtistCount)</span>&nbsp;
                @if (ViewModel.ArtistsProcessing)
                {
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
            <div class="card-body">
                <div class="scroll">
                    <table class='table table-striped' aria-labelledby="tableLabel">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Tracks</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var artist in ViewModel.GetOrderedArtists())
                            {
                                <tr>
                                    <td>@artist.Name</td>
                                    <td>@(artist.Tracks?.Count() ?? 0)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!--end - artists-->
    <!--end - genres-->
    <div class="col-sm-4">
        <div class="card">
            <div class="card-header">
                Genres <span>(@ViewModel.ProcessedGenreCount / @ViewModel.GenreCount)</span>&nbsp;
                @if (ViewModel.GenresProcessing)
                {
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
            <div class="card-body">
                <div class="scroll">
                    <table class='table table-striped' aria-labelledby="tableLabel" >
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Tracks</th>
                                <th>Artists</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var genre in ViewModel.GetOrderedGenres())
                            {
                                <tr>
                                    <td>@genre.Name</td>
                                    <td>@(genre?.Tracks.Count ?? 0)</td>
                                    <td>@(genre?.Artists.Count ?? 0)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!--end - genres-->
</div>
<!--end - row 1 -->
}


@code {

    StalkModel ViewModel = new StalkModel();

    public async Task QueryUserAsync()
    {
        ViewModel = StalkModelTransformer.Reset(ViewModel);

        var (userPlaylistResult, usePlaylistModel) = await ApiQueryService.QueryAsync<UserPlaylistsModel>(ViewModel.UserName, Options.Value.Limits.UserPlaylist);

        ViewModel.UserPlaylistResult = userPlaylistResult;
        ViewModel.UserPlaylistsModel = usePlaylistModel;

        StateHasChanged();

        if (!ViewModel.ShowPlayLists) return;

        ViewModel = StalkModelTransformer.BeginProcessing<Track>(ViewModel);
        ViewModel = StalkModelTransformer.BeginProcessing<Artist>(ViewModel);

        foreach (var playlist in ViewModel.UserPlaylistsModel.Playlists)
        {
            var (playlistResult, playlistModel) = await ApiQueryService.QueryAsync<PlaylistModel>(playlist.Id, Options.Value.Limits.PlaylistTrack);

            if (playlistResult == RequestStatus.Success)
            {
                StateHasChanged();

                var foundTracks = new List<Track>();
                playlist.FoundTracks = foundTracks;

                foreach (var item in playlistModel.Items)
                {
                    foundTracks.Add(item.Track);
                    ViewModel = StalkModelTransformer.RegisterTrack(ViewModel, item.Track);
                }

                playlist.FoundTracks = playlistModel.Items.Select(x => x.Track).ToList();
            }

            ViewModel = StalkModelTransformer.IncrementProcessedPlaylistCount(ViewModel);
            StateHasChanged();
        }

        ViewModel = StalkModelTransformer.BeginProcessing<GenreModel>(ViewModel);
        StateHasChanged();

        // get artist genres
        foreach (var artist in ViewModel.GetOrderedArtists())
        {
            // we have the artist name, ID, and track collection. we just need genres.
            // not going to replace the artist object with the one we query, because we would lose
            // the track list
            var artistGenres = await ApiQueryService.QueryAsync<ArtistModel>(artist.Id);
            if (artistGenres.RequestStatus == RequestStatus.Success) {
                // just copy the genres
                artist.Genres = artistGenres.Data.Genres;
                ViewModel = StalkModelTransformer.RegisterGenre(ViewModel, artist);
            };            

            StateHasChanged();
        }

        ViewModel = StalkModelTransformer.EndProcessing<Track>(ViewModel);
        ViewModel = StalkModelTransformer.EndProcessing<Artist>(ViewModel);
        ViewModel = StalkModelTransformer.EndProcessing<GenreModel>(ViewModel);
        StateHasChanged();

    }

}
