@page "/stalk"

@using SpotifyStalker.Interface
@using Spotify.Model
@using Spotify.Object;
@using Spotify.Interface
@using SpotifyStalker.Model;
@using Microsoft.Extensions.Options;
@inject IApiQueryService ApiQueryService
@inject IStalkModelTransformer StalkModelTransformer;
@inject IOptions<SpotifyApiSettings> Options;

<h1>Stalk</h1>

<div class="input-group mb-3" style="width: 500px;">
    <input type="text" placeholder="Spotify Username" class="form-control" @bind-value="ViewModel.UserName" />
    <div class="input-group-append">
        <button @onclick="QueryUserAsync" class="btn btn-primary">
            Search
        </button>
        <button class="btn btn-danger">
            Stop
        </button>
    </div>
</div>

@*Create an overall status indicator*@

@if (ViewModel.UserPlaylistResult == RequestStatus.NotFound)
{
    <h5 class="alert alert-danger" role="alert">
        User @ViewModel.UserName not found!
    </h5>
}

@if (ViewModel.UserPlaylistResult == RequestStatus.Success && !ViewModel.Playlists.Display)
{
    <h5 class="alert alert-warning" role="alert">
        User @ViewModel.UserName exists, but has no public playlists.
    </h5>
}

@if (ViewModel.Playlists.Display)
{
    <!--begin - row 1 -->
    <div class="row">

        <!--begin - playlists-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Playlists <span>(@ViewModel.Playlists.Processed / @ViewModel.Playlists.Total)</span>&nbsp;
                    @if (ViewModel.Playlists.InProcess)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var playlist in StalkModelTransformer
                                   .GetItems<PlaylistModel>(ViewModel)
                                   .OrderByDescending(x => x.TrackInfo.Total)
                                   .ToList())
                                {
                                    <tr>
                                        <td>@playlist.Name</td>
                                        <td>@(playlist.Tracks.Count()) / @(playlist.TrackInfo?.Total ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - playlists-->
        <!--begin - artists-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Artists <span>(@ViewModel.Artists.Processed / @ViewModel.Artists.Total)</span>&nbsp;
                    @if (ViewModel.Artists.InProcess)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var artist in StalkModelTransformer
                                   .GetItems<ArtistModel>(ViewModel)
                                   .OrderByDescending(x => x.Tracks?.Count ?? 0))
                                {
                                    <tr>
                                        <td>@artist.Name</td>
                                        <td>@(artist.Tracks?.Count() ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - artists-->
        <!--end - genres-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Genres <span>(@ViewModel.Genres.Processed / @ViewModel.Genres.Total)</span>&nbsp;
                    @if (ViewModel.Genres.InProcess)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                    <th>Artists</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var genre in StalkModelTransformer
                                   .GetItems<GenreModel>(ViewModel)
                                   .OrderByDescending(x => x.Tracks.Count).ToList())
                                {
                                    <tr>
                                        <td>@genre.Name</td>
                                        <td>@(genre?.Tracks.Count ?? 0)</td>
                                        <td>@(genre?.Artists.Count ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - genres-->
    </div>
    <!--end - row 1 -->
}


@code {

    StalkModel ViewModel = new StalkModel();

    public async Task QueryUserAsync()
    {
        ViewModel = StalkModelTransformer.Reset(ViewModel);

        var (userPlaylistResult, userPlaylistModel) = await ApiQueryService.QueryAsync<UserPlaylistsModel>(ViewModel.UserName, Options.Value.Limits.UserPlaylist);

        ViewModel.UserPlaylistResult = userPlaylistResult;

        ViewModel = StalkModelTransformer.RegisterPlaylists(ViewModel, userPlaylistModel.Playlists);

        StateHasChanged();

        if (!ViewModel.Playlists.Display) return;

        BeginProcessing<PlaylistModel>();
        BeginProcessing<Track>();
        BeginProcessing<ArtistModel>();

        StateHasChanged();

        // at this point we only have playlist names and IDs.
        // get the track list for each playlist
        foreach (var playlist in ViewModel.Playlists.Items)
        {
            var (playlistResult, playlistResultModel) = await ApiQueryService.QueryAsync<PlaylistModel>(playlist.Value.Id, Options.Value.Limits.PlaylistTrack);

            // if playlist request failed or no tracks were found, continue to next
            if (playlistResult != RequestStatus.Success
                || (!playlistResultModel?.Items?.Any() ?? false)
                )
            {
                IncrementCount<PlaylistModel>();
                continue;
            }

            // add the tracks from the playlist api query to the list of all tracks
            foreach (var playlistModelTrack in playlistResultModel.Items)
                ViewModel = StalkModelTransformer.RegisterTrack(ViewModel, playlist.Value, playlistModelTrack.Track);

            IncrementCount<PlaylistModel>();
        }

        EndProcessing<PlaylistModel>();
        BeginProcessing<GenreModel>();

        // get artist genres
        foreach (var artist in ViewModel.Artists.Items)
        {
            if (string.IsNullOrEmpty(artist.Value.Id)) // if artist has no id, request will fail. so don't bother.
            {
                IncrementCount<ArtistModel>();
                continue;
            }

            // we have the artist name, ID, and track collection. we just need genres.
            // not going to replace the artist object with the one we query, because we would lose
            // the track list
            var artistGenres = await ApiQueryService.QueryAsync<ArtistModel>(artist.Value.Id);
            if (artistGenres.RequestStatus == RequestStatus.Success)
            {
                // just copy the genres
                artist.Value.Genres = artistGenres.Data.Genres;
                ViewModel = StalkModelTransformer.RegisterGenre(ViewModel, artist.Value);
            };

            IncrementCount<ArtistModel>();
        }

        EndProcessing<Track>();
        EndProcessing<ArtistModel>();
        EndProcessing<GenreModel>();
    }

    private void IncrementCount<T>() where T : ISpotifyStandardObject
    {
        ViewModel = StalkModelTransformer.IncrementCount<T>(ViewModel);
        StateHasChanged();
    }

    private void BeginProcessing<T>() where T : ISpotifyStandardObject
    {
        ViewModel = StalkModelTransformer.EndProcessing<T>(ViewModel);
        StateHasChanged();
    }

    private void EndProcessing<T>() where T : ISpotifyStandardObject
    {
        ViewModel = StalkModelTransformer.EndProcessing<T>(ViewModel);
        StateHasChanged();
    }
}
