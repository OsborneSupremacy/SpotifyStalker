@page "/stalk"
@page "/stalk/{username}"

@using SpotifyStalker.Interface
@using Spotify.Model
@using Spotify.Object;
@using Spotify.Interface
@using SpotifyStalker.Model;
@using Microsoft.Extensions.Options;
@inject IStalkModelTransformer StalkModelTransformer;
@inject IUserQueryService UserQueryService;

<div class="container">

    <div class="jumbotron">
        <h1>Stalk</h1>

        <p class="lead text-muted">Enter the username of the Spotify user you want to stalk.</p>

        <p class="text-muted">Spotify usernames can be hard to find. You might not even know your own. You can find it by going to someone's profile page, then looking at the last part of the URL. For example, if the URL is open.spotify.com/user/joesmith, then <i>joesmith</i> is that person's Spotify username.</p>

        <p class="text-muted">If you're don't know someone's Spotify username, and you're not connected to them (you're not following them, they're not following you) you're not going to be able to use this feature. Try <a href="findperson">Find Someone To Stalk</a>.</p>

        <div class="input-group mb-3" style="width: 500px;">
            <input type="text" placeholder="Spotify Username" class="form-control" @bind-value="ViewModel.UserName" />
            <div class="input-group-append">
                <button @onclick="QueryUserAsync" class="btn spotify-background-primary">
                    Stalk
                </button>
            </div>
        </div>

        @if (ViewModel.UserPlaylistResult == RequestStatus.NotFound)
        {
            <h5 class="alert alert-danger" role="alert">
                User <span class="badge badge-danger">@ViewModel.UserName</span> not found! I thought you said you knew the username?
            </h5>
        }

        @if (ViewModel.UserPlaylistResult == RequestStatus.Success && !ViewModel.Playlists.Display)
        {
            <h5 class="alert alert-warning" role="alert">
                User <span class="badge badge-warning"><SpotifyLink Name="@ViewModel.UserName" Id="@ViewModel.UserName" Type="user" /></span> exists, but has no public playlists. They must think they're too precious to be stalked by random Internet strangers.
            </h5>
        }

        @if (ViewModel.Playlists.Display)
        {
            <StalkTarget OwnerId="@ViewModel.Playlists.Items.FirstOrDefault().Value.Owner.Id" 
                         DisplayName="@ViewModel.Playlists.Items.FirstOrDefault().Value.Owner.DisplayName"
                         Processing="@ViewModel.Processing" />
        }

    </div>

</div>

@if (ViewModel.Playlists.Display)
{
    <!--begin - row 1 -->
    <div class="row">

        <!--begin - playlists-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Playlists&nbsp;
                    <CategoryProgress Processed="@ViewModel.Playlists.Processed" ProgressBarStyle="bg-success" Total="@ViewModel.Playlists.Total" ProgressDisplay="@ViewModel.Playlists.ProgressDisplay" />
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var playlist in StalkModelTransformer
                        .GetItems<PlaylistModel>(ViewModel)
                        .OrderByDescending(x => x.TrackInfo.Total)
                        .ToList())
                                {
                                    <tr>
                                        <td>
                                            <SpotifyLink Name="@playlist.Name" Type="playlist" Id="@playlist.Id" />
                                        </td>
                                        <td>@(playlist.Tracks.Count()) / @(playlist.TrackInfo?.Total ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - playlists-->
        <!--begin - artists-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Artists&nbsp;
                    <CategoryProgress Processed="@ViewModel.Artists.Processed" ProgressBarStyle="bg-info" Total="@ViewModel.Artists.Total" ProgressDisplay="@ViewModel.Artists.ProgressDisplay" />
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var artist in StalkModelTransformer
                        .GetItems<ArtistModel>(ViewModel)
                        .OrderByDescending(x => x.Tracks?.Count ?? 0))
                                {
                                    <tr>
                                        <td>
                                            <SpotifyLink Name="@artist.Name" Type="artist" Id="@artist.Id" />
                                        </td>
                                        <td>@(artist.Tracks?.Count() ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - artists-->
        <!--end - genres-->
        <div class="col-sm-4">
            <div class="card">
                <div class="card-header">
                    Genres&nbsp;
                    <CategoryProgress Processed="@ViewModel.Genres.Processed" ProgressBarStyle="bg-warning" Total="@ViewModel.Genres.Total" ProgressDisplay="@ViewModel.Genres.ProgressDisplay" />
                </div>
                <div class="card-body">
                    <div class="scroll">
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Tracks</th>
                                    <th>Artists</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var genre in StalkModelTransformer
                        .GetItems<GenreModel>(ViewModel)
                        .OrderByDescending(x => x.Tracks.Count).ToList())
                                {
                                    <tr>
                                        <td>@genre.Name</td>
                                        <td>@(genre?.Tracks.Count ?? 0)</td>
                                        <td>@(genre?.Artists.Count ?? 0)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - genres-->
    </div>
    <!--end - row 1 -->

    <p>&nbsp;</p>

    <!--begin - row 2 -->
    <div class="row">

        <!--begin - audio features-->
        <div class="col-sm-8">
            <div class="card">
                <div class="card-header">
                    Audio Features&nbsp;
                    <CategoryProgress Processed="@ViewModel.Tracks.Processed" ProgressBarStyle="bg-danger" Total="@ViewModel.Tracks.Total" ProgressDisplay="@ViewModel.Tracks.ProgressDisplay" />
                </div>
                <div class="card-body">
                    <div>
                        <table class='table table-striped' aria-labelledby="tableLabel">
                            <thead>
                                <tr>
                                    <th>Metric</th>
                                    <th>Avg.</th>
                                    <th>Range</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var metric in StalkModelTransformer
                      .GetItems<Metric>(ViewModel).OrderBy(x => x.Priority).ToList())
                                {
                                    <tr>
                                        <td>
                                            <span href="#" title="@metric.Content" class="badge badge-info">ℹ️</span> @metric.Name
                                        </td>
                                        <td align="right">@metric.FormattedAverage</td>
                                        <td align="right">@metric.NominalMin - @metric.NominalMax @metric.Unit</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <!--end - audio features-->
        <!--begin - section 3-->
        <div class="col-sm-4">

        </div>
        <!--end - section 3-->

    </div>
    <!--end - row 2 -->

    <p>&nbsp;</p>

    @foreach (var metric in StalkModelTransformer.GetItems<Metric>(ViewModel).OrderBy(x => x.Priority).ToList())
    {
        <MetricComponent Metric="@metric"></MetricComponent>
    }
}

@code {

    [Parameter]
    public string Username { get; set; }

    StalkModel ViewModel = new StalkModel();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Username))
        {
            ViewModel.UserName = Username;
            await QueryUserAsync();
            return;
        }
        else
        {
            return;
        }
    }

    public async Task QueryUserAsync()
    {
        await UserQueryService
            .QueryAsync(ViewModel,
                () => {
                    StateHasChanged();
                }
            );
    }
}
