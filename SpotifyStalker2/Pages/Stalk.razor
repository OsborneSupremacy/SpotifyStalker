@page "/stalk"

@using SpotifyStalker.Interface
@using Spotify.Model
@using Spotify.Object;
@using SpotifyStalker.Model;
@using SpotifyStalker2.ViewModel
@using Microsoft.Extensions.Options;
@inject IApiQueryService ApiQueryService
@inject IOptions<SpotifyApiSettings> Options;

<h1>Stalk</h1>

<div class="input-group mb-3" style="width: 500px;">
    <input type="text" placeholder="Spotify Username" class="form-control" @bind-value="ViewModel.UserName" />
    <div class="input-group-append">
        <button @onclick="QueryUserAsync" class="btn btn-primary">
            Search
        </button>
        <button class="btn btn-danger">
            Stop
        </button>
    </div>
</div>

@if (ViewModel.UserPlaylistResult == RequestStatus.NotFound)
{
    <h5 class="alert alert-danger" role="alert">
        User @ViewModel.UserName not found!
    </h5>
}

@if (ViewModel.UserPlaylistResult == RequestStatus.Success && !ViewModel.ShowPlayLists)
{
    <h5 class="alert alert-warning" role="alert">
        User @ViewModel.UserName exists, but has no public playlists.
    </h5>
}

@if (ViewModel.ShowPlayLists)
{
    <div class="row">
        <div class="card">
            <div class="card-header">
                Playlists <span>(@ViewModel.ProcessedPlaylistCount / @ViewModel.PlaylistCount)</span>&nbsp;
                @if (ViewModel.PlaylistsProcessing)
                {
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
            <div class="card-body">
                <div class="scroll">
                    <table class='table table-striped' aria-labelledby="tableLabel">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Tracks</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var playlist in ViewModel.GetOrderedPlayLists())
                            {
                                <tr>
                                    <td>@playlist.Name</td>
                                    <td>@(playlist?.FoundTracks?.Count() ?? 0) / @(playlist.Tracks?.Total ?? 0)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}


@code {

    StalkerViewModel ViewModel = new StalkerViewModel();

    public async Task QueryUserAsync()
    {
        ViewModel.ResetProcessedPlaylistCount();

        var (userPlaylistResult, usePlaylistModel) = await ApiQueryService.QueryAsync<UserPlaylistsModel>(ViewModel.UserName, Options.Value.Limits.UserPlaylist);

        ViewModel.UserPlaylistResult = userPlaylistResult;
        ViewModel.UserPlaylistsModel = usePlaylistModel;

        StateHasChanged();

        if (!ViewModel.ShowPlayLists) return;

        foreach (var playlist in ViewModel.UserPlaylistsModel.Playlists)
        {
            var (playlistResult, playlistModel) = await ApiQueryService.QueryAsync<PlaylistModel>(playlist.Id, Options.Value.Limits.PlaylistTrack);

            if (playlistResult == RequestStatus.Success)
                playlist.FoundTracks = playlistModel.Items.Select(x => x.Track).ToList();

            ViewModel.IncrementProcessedPlaylistCount();
            StateHasChanged();
        }

    }

}
