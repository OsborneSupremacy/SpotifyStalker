@page "/findperson"

@using SpotifyStalker.Interface
@using SpotifyStalker.Model
@using Spotify.Model
@using Microsoft.Extensions.Options;

@inject IApiQueryService ApiQueryService
@inject IOptions<SpotifyApiSettings> Options;
@inject IRandomProvider RandomProvider;
@inject NavigationManager NavigationManager;

<div class="container">

    <div class="jumbotron">
        <h1>Find Someone To Stalk</h1>

        <p>Spotify doesn't let you search for users, for good reason. So how can you find a random user to "stalk"*.?</p>

        <p>The answer is, public playlists. You can search public playlists by keyword, and then view the username of the owner.</p>

        <p>From there, you can view all of that user's public playlists.</p>

        <p>
            Can't think of a good keyword? Try the name of any band,
            <span style="cursor: pointer" @onclick="FindRandomPerson" class="badge badge-success">person</span>,
            <span style="cursor: pointer" @onclick="FindRandomGenre" class="badge badge-primary">genre</span>,
            <span style="cursor: pointer" @onclick="FindRandomLocation" class="badge badge-info">place</span>,
            <span style="cursor: pointer" @onclick="FindRandomWord" class="badge badge-secondary">word</span>,
            or let us <span style="cursor: pointer" @onclick="JustPickSomeoneAsync" class="badge badge-warning">just pick someone</span>.
        </p>

        <div class="input-group mb-3" style="width: 500px;">
            <input @bind-value="ViewModel.Keyword" @onblur="QueryPlaylistsAsync" type="text" placeholder="Enter a Keyword" class="form-control" />
            <div class="input-group-append">
                <button @onclick="QueryPlaylistsAsync" class="btn btn-primary">
                    Search
                </button>
            </div>
        </div>

        @if (ViewModel.NoPlayListsFound)
        {
            <h5 class="alert alert-danger" role="alert">
                No playlists found with a keyword of <span class="badge badge-danger">@ViewModel.Keyword</span>
            </h5>
        }

    </div>

</div>


@if (ViewModel.Playlists?.Any() ?? false) 
{
    <div class="row">

        <div class="col-sm-12">

            <div class="card">
                <div class="card-header">
                    Playlist Results for Keyword <span class="badge badge-info">@ViewModel.Keyword</span>
                </div>
                <div class="card-body">
                    <div>
                        <table class='table table-striped' aria-labelledby="tableLabel" >
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Owner</th>
                                    <th>Playlist</th>
                                    <th>Track Count</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var playlist in ViewModel.Playlists)
                                {
                                    <tr>
                                        <td>
                                            <a class="btn btn-sm spotify-background-primary" href="/stalk/@(playlist?.Owner?.Id ?? "spotify")">
                                                Stalk
                                            </a>
                                        </td>
                                        <td>
                                            <SpotifyLink Name="@playlist.Owner.DisplayName" Id="@playlist.Owner.Id" Type="user" />
                                        </td>
                                        <td>
                                            <SpotifyLink Name="@playlist.Name" Id="@playlist.Id" Type="playlist" />
                                        </td>
                                        <td>
                                            @(playlist?.TrackInfo?.Total ?? 0)
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
}


<p>&nbsp;</p>


@code {

    FindPersonModel ViewModel = new FindPersonModel();

    public async Task QueryPlaylistsAsync()
    {
        var (searchStatus, searchResultModel) = await ApiQueryService.QueryAsync<UserPlaylistSearchResultModel>(ViewModel.Keyword);

        ViewModel.SearchStatus = searchStatus;

        if(searchStatus != RequestStatus.Success)
        {
            StateHasChanged();
            return;
        }

        ViewModel.Playlists = searchResultModel.Playlists.Items.ToList();

    }

    public async Task FindRandomPerson() => await SearchForKeyWord(RandomProvider.GetPersonName());

    public async Task FindRandomLocation() => await SearchForKeyWord(RandomProvider.GetLocation());

    public async Task FindRandomGenre() => await SearchForKeyWord(RandomProvider.GetGenre());

    public async Task FindRandomWord() => await SearchForKeyWord(RandomProvider.GetWord());

    protected async Task SearchForKeyWord(string keyword)
    {
        ViewModel.Keyword = keyword;
        await QueryPlaylistsAsync();
    }

    public async Task JustPickSomeoneAsync()
    {
        await SearchForKeyWord(RandomProvider.GetWord());

        if (!(ViewModel.Playlists?.Any() ?? false)) return;

        var playlist = RandomProvider.PickRandom(
            ViewModel.Playlists
                .Where(x => !(x.Owner.Id.Equals("spotify", StringComparison.OrdinalIgnoreCase)))
        );

        if (playlist == null) return;

        NavigationManager.NavigateTo($"/stalk/{playlist.Owner.Id}");
    }

}
