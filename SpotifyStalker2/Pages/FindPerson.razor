@page "/findperson"

@using SpotifyStalker.Interface
@using SpotifyStalker.Model
@using Spotify.Model
@using Microsoft.Extensions.Options;

@inject IApiQueryService ApiQueryService
@inject IOptions<SpotifyApiSettings> Options;
@inject IRandomProvider RandomProvider;
@inject NavigationManager NavigationManager;

<h1>Find Someone To Stalk</h1>

<div class="container-fluid">

    <p>Spotify doesn't let you search for users, for good reason. So how can you find a random user to "stalk"*.?</p>

    <p>The answer is, public playlists. You can search public playlists by keyword, and then view the username of the owner.</p>

    <p>From there, you can view all of that user's public playlists.</p>

    <p>Can't think of a good keyword? Try the name of any band, person, genre, or <button @onclick="FindRandomLocation" type="button" class="btn btn-secondary btn-sm">place</button>, or let us <button @onclick="JustPickSomeoneAsync" type="button" class="btn btn-secondary btn-sm">just pick someone</button>.</p>
</div>

<div class="input-group mb-3" style="width: 500px;">
    <input @bind-value="ViewModel.Keyword" @onblur="QueryPlaylistsAsync" type="text" placeholder="Enter a Keyword" class="form-control" />
    <div class="input-group-append">
        <button @onclick="QueryPlaylistsAsync" class="btn btn-primary">
            Search
        </button>
    </div>
</div>

<p>&nbsp;</p>

@if (ViewModel.ShowPlaylists)
{
    <h5 class="alert alert-danger" role="alert">
        No playlists found with a keyword of `@ViewModel.Keyword`.
    </h5>
}

@if (ViewModel.Playlists?.Any() ?? false) 
{
    <div class="row">

        <div class="col-sm-12">

            <div class="card">
                <div class="card-header">
                    Playlist Results for Keyword `@ViewModel.Keyword`
                </div>
                <div class="card-body">
                    <div>
                        <table class='table table-striped' aria-labelledby="tableLabel" >
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Track Count</th>
                                    <th>Owner Display Name</th>
                                    <th>Owner Username</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var playlist in ViewModel.Playlists)
                                {
                                    <tr>
                                        <td>
                                            @playlist.Name
                                        </td>
                                        <td>
                                            @(playlist?.TrackInfo?.Total ?? 0)
                                        </td>
                                        <td>
                                            @(playlist?.Owner?.DisplayName ?? "spotify")
                                        </td>
                                        <td>
                                            <a class="btn btn-primary btn-sm" href="/stalk/@(playlist?.Owner?.Id ?? "spotify")">
                                                Stalk
                                            </a>
                                            @(playlist?.Owner?.Id ?? "spotify")
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
}


<p>&nbsp;</p>


@code {

    FindPersonModel ViewModel = new FindPersonModel();

    public async Task QueryPlaylistsAsync()
    {
        var (searchStatus, searchResultModel) = await ApiQueryService.QueryAsync<SearchResultModel>(ViewModel.Keyword);

        ViewModel.SearchStatus = searchStatus;

        if(searchStatus != RequestStatus.Success)
        {
            StateHasChanged();
            return;
        }

        ViewModel.Playlists = searchResultModel.Playlists.Items.ToList();

    }

    public async Task FindRandomLocation()
    {
        ViewModel.Keyword = RandomProvider.GetLocation();

        await QueryPlaylistsAsync();
    }

    public async Task JustPickSomeoneAsync()
    {
        ViewModel.Keyword = RandomProvider.GetWord();

        await QueryPlaylistsAsync();

        if (!(ViewModel.Playlists?.Any() ?? false)) return;

        var playlist = RandomProvider.PickRandom(ViewModel.Playlists);

        NavigationManager.NavigateTo($"/stalk/{playlist.Owner.Id}");
    }

}
