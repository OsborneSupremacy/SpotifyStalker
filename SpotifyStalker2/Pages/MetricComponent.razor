@using SpotifyStalker.Model
@using Spotify.Object

<div class="jumbotron jumbotron-fluid">
    <div class="container">
        <h1 class="display-4">@Metric.Name</h1>
        <p class="lead">@Metric.Content</p>

        @if (Metric.Winner != null)
        {
            <div class="alert alert-success">
                Track with Highest @Metric.Name <span class="badge badge-success">@(Metric?.Winner?.MetricValue ?? 0)</span>: 
                <SpotifyLink Name="@Metric.Winner.Value.Track.Name" Id="@Metric.Winner.Value.Track.Id" Type="track" /> by @WriteArtistInfo(Metric.Winner)
            </div>
        }

        @if (Metric.Loser != null)
        {
            <div class="alert alert-danger">
                Track with Lowest @Metric.Name <span class="badge badge-danger">@(Metric?.Loser?.MetricValue ?? 0)</span>: 
                <SpotifyLink Name="@Metric.Loser.Value.Track.Name" Id="@Metric.Loser.Value.Track.Id" Type="track" /> by @WriteArtistInfo(Metric.Loser)
            </div>
        }

        <div class="alert alert-primary">
            Average @Metric.Name: @Metric.FormattedAverage
        </div>

        <div class="imageFrame" style="background-image: url('/assets/images/@Metric.ImageFile')">
            <svg>
                <line x1="@Metric.MarkerPosition" y1="0" x2="@Metric.MarkerPosition" y2="386" style="stroke:rgb(255,0,0);stroke-width:2" />
            </svg>
        </div>

    </div>
</div>


@code {

    [Parameter]
    public Metric Metric { get; set; }

    public string WriteArtistInfo((double MetricValue, Track Track)? input)
    {
        var s = new System.Text.StringBuilder();
        int artistCount = 0;
        foreach(var artist in input.Value.Track.Artists) {
            if (artistCount > 0) s.Append(", ");
            s.Append(artist.Name);
            artistCount++;
        }
        return s.ToString();
    }

}